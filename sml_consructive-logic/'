%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% some examples
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
proof contractoin : A & A => A =
begin
[ A & A;        % assumtion
  A ];          % via elimination
A & A => A;     % conclusion
end;

proof drop : A => B => A =
begin
[ A;
  [ B; A ];
  B => A
];
A => B => A;
end;

proof impDef : (~A|B) => A => B =
begin
[ (~A | B);
  [ A;
    [ ~A; F; B ];
    [ B; B ];
    B;
  ];
  A => B
  ];
(~A|B) => A => B;
end;

% truth in constructive logic: ⊢⊤ true

% falsehood in constructive logic: ⊥ has no proof.
% from falsehood we can prove anything: ⊥ true⊢C true.
% negation : ~A=A⊃⊥. meaning, if ~A is true, the assumpton A is contradictory.

proof dnLem : ~~(A | ~A) =
begin
[ ~(A | ~A);
  [ A;
    A | ~A;
    F ];
  ~A;
  A | ~A;
  F ];
~~(A | ~A);
end;


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% HARMONY
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Introduction and elimination rules come in harmony:
%   Local soundess:     (Elim aren't too strong)
%     elim always get information from what intros provide as it is.
%     no new information.
%   Local completeness: (Elim arent too weak)
%     we can always apply elim then intro to go back.

% But how do we show that a logic connective is in harmony with it's
% introduction and elimination rules? We need to show the local soundness and
% local completeness.
%
% Prove local soundness with local reduction:
$     (local reduction of deduction D to D' of same judgement A true)
%     D             D'
%   A true   ⇒R   A true
% Prove local completeness with local expansion:
%     D             D'
%   A true   ⇒E   A true

% e.g prove conjunction is locally sound and locally complete
% local soundness:
%     D       E
%    A true  B true                 D
%   ---------------- ∧I     ⇒R     A true
%       A ∧ B true
%     ------------ ∧EL
%        A true
%     D       E
%    A true  B true                  E
%   ---------------- ∧I     ⇒R     A true
%       A ∧ B true
%     ------------ ∧EL
%        B true




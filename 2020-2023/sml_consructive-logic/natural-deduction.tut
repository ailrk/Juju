%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% natural deduction
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

proof Reflexivity : A => A =
begin
[A; A];
A => A;
end;

proof Distributivity : ((A | B) & C) => (A & C) | (B & C) =
begin
[ (A | B) & C;
  C;
  [ A;
    A & C;
  ];
  (A & C) | (B & C);
];
((A | B) & C) => (A & C) | (B & C);
end;

% proof Implicandtion : (A => B) => ((A & C) => (B & C)) =
% begin
% end;
%
% proof Implicortion : (A => B) => ((A | C) => (B | C)) =
% begin
% end;
%
% proof Idempotency : ((A => B) & (A => ~B)) => ~A =
% begin
% end;


% The What and the chaff



% Harmony and derivability ♣

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% some examples
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
proof contractoin : A & A => A =
begin
[ A & A;        % assumtion
  A ];          % via elimination
A & A => A;     % conclusion
end;

proof drop : A => B => A =
begin
[ A;
  [ B; A ];
  B => A
];
A => B => A;
end;

proof impDef : (~A|B) => A => B =
begin
[ (~A | B);
  [ A;
    [ ~A; F; B ];
    [ B; B ];
    B;
  ];
  A => B
  ];
(~A|B) => A => B;
end;

% truth in constructive logic: ⊢⊤ true

% falsehood in constructive logic: ⊥ has no proof.
% from falsehood we can prove anything: ⊥ true⊢C true.
% negation : ~A=A⊃⊥. meaning, if ~A is true, the assumpton A is contradictory.

proof dnLem : ~~(A | ~A) =
begin
[ ~(A | ~A);
  [ A;
    A | ~A;
    F ];
  ~A;
  A | ~A;
  F ];
~~(A | ~A);
end;

% be careful about assoicativity. Here we are proving
% A ∧ B ∧ C ⊃ C ∧ (A ∧ B). It's right associative.
proof shuffle : A & B & C => C & A & B =
begin
[ A & B & C;
  A;          % elim
  B & C;      % elim
  C;          % elim
  B;
  A & B;
  C & A & B;
];
A & B & C => C & A & B;
end;

proof application: A & (A => B) => B =
begin
[ A & (A => B);
  A;
  A => B;
  B;
];
A & (A => B) => B;
end;
